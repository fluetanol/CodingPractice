//https://school.programmers.co.kr/learn/courses/30/lessons/12982
//프로그래머스_lv1예산
//2024.02.19
//10분소모

using System;
using System.Linq;

public class 프로그래머스_lv1예산
{
    public int solution(int[] d, int budget)
    {
        int answer = 0;
        Array.Sort(d);
        int sum = 0;
        foreach (var i in d)
        {
            sum += i;
            if (sum > budget) break;
            answer += 1;
        }
        return answer;
    }
}

//오름차순에 따라 숫자를 더한 횟수가 임계점 X를 넘기 위한 최대 횟수가 된다.
//이 방식이 항상 정답을 보장하는 이유
//1. 만약 큰 순서대로 숫자를 더한 경우, 작은 숫자를 더한 것 보다 더 적은 횟수로 임계점을 충분히 넘을 수 있음
//ex) 임계점이 10이고 주어진 숫자가 2,2,3,4,5,5라할때
//큰 수 5,5를 더하면 두번만에 10이 되는 반면 작은 수 2,2,3을 더하면 세번 더해도 10을 넘지 않음

// 2. 만약 작은 순서대로 숫자를 더한 경우보다
// 다른 숫자를 더한 조합의 경우가 더 많은 횟수를 더해서 임계점을 넘을 수 있다면?
// 
// 증명
// 임계점을 x, 작은 순서로 더한 숫자의 합을 a+b+c+d... 라고 하자. (여기서 a,b,c,...는 오름차순 순서로 더해지는 중인 모습임)
// a+b+c+d... <= x 인데, 여기에서 d를 대체 할 수 있는 다른 숫자 f, g가 있다고 하자.
// 만약 숫자 d를 f로 갈아 끼울 때 g도 같이 더함으로서 더하는 횟수가 1이라도 더 증가할 수 있다면
// a+b+c+f+g ...<=x라는 건데,
//오름차순 정렬 특성상 반드시 f, g는 d보다 클 것이다.
//즉, d<f, d<g이므로, (같은 경우는 d를 쓰나 f를 쓰나 더하는 횟수가 같으므로 의미가 없다.)
//a+b+c+d...<a+b+c+f+g...<=x라는 것, 식을 정리하면
// d<f+g<=x-a-b-c-....가 된다.
//즉, x에서 d 또는 f+g를 제외한 나머지 원소들을 빼서 나온 차이를 따져봐야 하는 건데
//여기서 네 가지 케이스가 모두 모순이다.

// 1) 격차가 d보다 크고 d+f, d+g보다 작은 경우
//      d를 더하든 f를 더하든 g를 더하든 두번 이상 더하는 순간 임계점을 넘어가므로 어차피 더해야 하는 횟수는 동일하다.
//      더하는 횟수에 대한 결과값이 변하지 않는데 d를 대체하여 f, g를 더하는 게 나은 상황이라는 점에서 모순이 됨. 

// 2)   격차가 d+f, d+g보다 같거나 크고 f+g보다 작은 경우
//      위의 부등식 조건에 따라, d+f<f+g, d+g<f+g가 보장된다.
//      f+g보다 격차가 작다면 "d를 대체 할 f, g" 라는 조건에서 모순이 될 뿐더러 (f, g를 둘다 합산하는 순간 임계점을 넘기 때문.)
//      애초에 d보다 더 큰 f 또는 g를 하나만 더하면 되므로 여전히 "오름차순에 따라 숫자를 더한 횟수가 임계점을 넘기 위한 최대 횟수가 된다"
//      라는 조건에 망가지지 않는다.
//      또한 f, g보다 작고 d보다 큰 어떤 수 h가 있다면 애초에 f, g를 더할게 아니라 h를 더하면 됨.
//      따라서 어떤 상황이든 위 조건에 모순.


//3)    격차가 f+g보다 같거나 크고 d+f+g보다 작은 경우
//     어차피 d+f, d+g가 f+g보다 작은데다가, 어느 방향으로 더하든 2번을 더한다는 결과는 변함이 없다
//     f, g가 d보다 나은 d보다 더 큰 수라는 상황에서 모순.


// 4)   격차가 d+f+g보다 큰 경우
//      무조건 d,f,g 셋을 다 써야 하는 상황이므로 f,g가 d를 대체할 게 아니라 그냥 d 뒤에 오름차순의 더 큰 원소들을
//      아직 더하지 않아서 임계점을 넘지 않은 것일 뿐이므로 d를 포함한 추가로 더할 오름차순 원소를 더 더해주면 된다.
//      그니까 여전히 "오름차순에 따라 숫자를 더한 횟수가 임계점을 넘기 위한 최대 횟수가 된다" 라는 조건을 망가트리지 않았을 뿐더러
//      "d를 대체할수 있는 더 최적의 답 f+g"라는 조건에도 모순

// 5) 격차가 d보다 작은 경우
//      d<f, d<g인데 격차가 d보다 작다면 애초에 d를 빼고 f, g를 넣으면 임계점을 넘어간다.
//      즉 오름차순으로 d까지만 더하는게 최적이라는 게 오히려 입증됨. 즉, 모순.


//다시 말하면 애초에 f, g를 넣는게 모순이 되는 상황이거나,
//굳이 d를 뺄게 아니라 아직 임계점 x를 넘기 위한 숫자 합을 끝마치지 못한 상황
//둘 중 하나이므로
//"오름차순에 따라 숫자를 더한 횟수가 임계점 x를 넘기 위한 최대 합산 횟수를 만든다"
//라는 명제는 항상 참임을 보장한다.


//그리디 알고리즘 해법이라고 함